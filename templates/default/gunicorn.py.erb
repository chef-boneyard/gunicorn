##
# Gunicorn config at <%= @name %>
# Managed by Chef - Local Changes will be Nuked from Orbit (just to be sure)
##

# What ports/sockets to listen on, and what options for them.
<%- if @listen.is_a?(Array) %>
bind = [
<%- @listen.each do | listen_item | %>
    "<%= listen_item %>",
<%- end %>
]
<%- else %>
bind = "<%= @listen %>"
<%- end %>

# The maximum number of pending connections
backlog = <%= @backlog %>

# Whether the app should be pre-loaded
preload_app = <%= @preload_app.to_s.capitalize %>

# How many worker processes
workers = <%= @worker_processes %>

# Type of worker to use
worker_class = "<%= @worker_class %>"

# What the timeout for killing busy workers is, in seconds
timeout = <%= @worker_timeout %>

# How long to wait for requests on a Keep-Alive connection, in seconds
keepalive = <%= @worker_keepalive %>

# The maxium number of requests a worker will process before restarting
max_requests = <%= @worker_max_requests %>

<%- if @worker_threads %>
# Number of threads per worker
threads = <%= @worker_threads %>

<%- end %>
<%- if @worker_max_requests_jitter %>
# The maximum jitter to add to the max_requests setting.
max_requests_jitter = <%= @worker_max_requests_jitter %>

<%- end %>

<%- if @worker_connections %>
# The maximum number of simultaneous clients.
worker_connections = <%= @worker_connections %>

<%- end %>
<%- if @worker_graceful_timeout %>
# Timeout for graceful workers restart.
graceful_timeout = <%= @worker_graceful_timeout %>

<%- end %>
<%- if @limit_request_line %>
# The maximum size of HTTP request line in bytes.
limit_request_line = <%= @limit_request_line %>

<%- end %>
<%- if @limit_request_fields %>
# Limit the number of HTTP headers fields in a request.
limit_request_fields = <%= @limit_request_fields %>

<%- end %>
<%- if @limit_request_field_size %>
# Limit the allowed size of an HTTP request header field.
limit_request_field_size = <%= @limit_request_field_size %>

<%- end %>
<%- if @server_hooks[:on_starting] %>
# What to do before the master process is initialized
def on_starting(server):
  <%= @server_hooks[:on_starting] %>

<%- end %>
<%- if @server_hooks[:on_reload] %>
# Called to recycle workers during a reload via SIGHUP
def on_reload(server):
  <%= @server_hooks[:on_reload] %>

<%- end %>
<%- if @server_hooks[:when_ready] %>
# What to do after the server starts
def when_ready(server):
    <%= @server_hooks[:when_ready] %>

<%- end %>
<%- if @server_hooks[:pre_fork] %>
# What to do before we fork a worker
def pre_fork(server, worker):
    <%= @server_hooks[:pre_fork] %>

<%- end %>
<%- if @server_hooks[:post_fork] %>
# What to do after we fork a worker
def post_fork(server, worker):
    <%= @server_hooks[:post_fork] %>

<%- end %>
<%- if @server_hooks[:pre_exec] %>
# What to do before a new master process is forked
def pre_exec(server):
    <%= @server_hooks[:pre_exec] %>

<%- end %>
<%- if @server_hooks[:pre_request] %>
# What to do before we process a request
def pre_request(worker, req):
    <%= @server_hooks[:pre_request] %>

<%- end %>
<%- if @server_hooks[:post_request] %>
# What to do after we process a request
def post_request(worker, req):
    <%= @server_hooks[:post_request] %>

<%- end %>
<%- if @server_hooks[:worker_exit] %>
# What to do after we process a request
def worker_exit(server, worker):
    <%= @server_hooks[:worker_exit] %>

<%- end %>
<%- if @pid %>
# Where to drop a pidfile
pidfile = "<%= @pid %>"

<%- end %>
<%- if @accesslog %>
# The access log file to write to.
accesslog = "<%= @accesslog %>"

<%- end %>
<%- if @access_log_format %>
# The access log format.
access_log_format = "<%= @access_log_format %>"

<%- end %>
<%- if @errorlog %>
# The error log file to write to.
errorlog = "<%= @errorlog %>"

<%- end %>
<%- if @loglevel %>
# The granularity of error log outputs.
loglevel = "<%= @loglevel %>"

<%- end %>
<%- if @logger_class %>
# The logger you want to use to log events in gunicorn.
logger_class = "<%= @logger_class %>"

<%- end %>
<%- if @logconfig %>
# The log config file to use.
logconfig = "<%= @logconfig %>"

<%- end %>
<%- if @secure_scheme_headers %>
# A dictionary containing headers and values that the front-end proxy uses to indicate HTTPS requests.
secure_scheme_headers = {
  <%- @secure_scheme_headers.each do |header,value| %>
  "<%= header %>": "<%= value%>",
  <%- end %>
}

<%- end %>
<%- if @forwarded_allow_ips %>
# Front-endâ€™s IPs from which allowed to handle set secure headers. (comma separate).
forwarded_allow_ips = "<%= @forwarded_allow_ips %>"

<%- end %>
<%- if @proc_name %>
# A base to use with setproctitle for process naming.
proc_name = "<%= @proc_name %>"

<%- end %>
<%- if @raw_env %>
# OS-level environment variables
raw_env = [
<%- @raw_env.each do | raw_var | %>
  '<%= raw_var %>',
<%- end %>
]

<%- end %>
